name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install shellcheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
    
    - name: Lint Bash script
      run: shellcheck src/bash/pigame.sh
    
    - name: Lint Python script
      run: pylint src/python/pigame.py || true
  
  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential bc
    
    - name: Build project
      run: make build
  
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential bc python3 python3-pip
    
    - name: Build project
      run: make build
    
    - name: Test Bash implementation
      run: make test-bash
      
    - name: Test C implementation
      run: make test-c
      
    - name: Test Python implementation
      run: make test-python
      
    - name: Test Python unit tests
      run: make test-python-unit
      
    - name: Create Python virtual environment
      run: python3 -m venv .venv
      
    - name: Setup Python environment
      run: make setup-python
      
    - name: Run pytest with coverage
      run: make test-pytest
      
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
  
  release:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Build project
      run: make build
    
    - name: Create release artifacts
      run: |
        mkdir -p dist
        tar -czf dist/pigame-${{ github.ref_name }}.tar.gz --exclude='.git' --exclude='dist' .
        zip -r dist/pigame-${{ github.ref_name }}.zip . -x "*.git*" "dist/*"
    
    - name: Generate release notes
      run: |
        version=${GITHUB_REF#refs/tags/v}
        awk "/## \\[$version\\]/,/## \\[/" CHANGELOG.md | sed '1!{/^## \[/d;}' > RELEASE_NOTES.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/pigame-${{ github.ref_name }}.tar.gz
          dist/pigame-${{ github.ref_name }}.zip
        body_path: RELEASE_NOTES.md
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}