name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Cache venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y shellcheck clang-format
      - name: Create Python virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
      - name: Run Ruff
        run: |
          source .venv/bin/activate
          ruff check src/python/ tests/ --fix
          ruff format src/python/ tests/
      - name: Lint Bash script
        run: shellcheck src/bash/pigame.sh
      - name: Lint C code
        run: |
          find src/c -name "*.c" -o -name "*.h" | xargs clang-format -i --style=file
          git diff --exit-code || (echo "C code not formatted correctly" && exit 1)

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Cache venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential bc
      - name: Create Python virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
      - name: Build project
        run: make build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Cache venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential bc
      - name: Create Python virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
      - name: Build project
        run: make build
      - name: Test Bash implementation
        run: make test-bash
      - name: Test C implementation
        run: make test-c
      - name: Test Python implementation
        run: |
          source .venv/bin/activate
          make test-python
      - name: Run pytest with coverage
        run: |
          source .venv/bin/activate
          pytest tests/test_pytest.py -v --cov=src/python --cov-report=term-missing --cov-report=html
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  release:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential bc zip
      - name: Create Python virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
      - name: Build project
        run: make build
      - name: Create release artifacts
        run: |
          mkdir -p dist
          tar -czf dist/pigame-v${{ github.ref_name }}.tar.gz --exclude='.git' --exclude='dist' .
          zip -r dist/pigame-v${{ github.ref_name }}.zip . -x "*.git*" "dist/*"
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: dist/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            dist/pigame-v${{ github.ref_name }}.tar.gz
            dist/pigame-v${{ github.ref_name }}.zip
          draft: false
          prerelease: false
