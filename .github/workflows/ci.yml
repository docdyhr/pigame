name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual trigger'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y shellcheck clang-format
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install shellcheck clang-format
      - name: Create Python virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate || source .venv/Scripts/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
          python -m pip install pytest pytest-cov coverage codecov ruff
      - name: Run unified linting script
        run: |
          chmod +x scripts/lint.sh
          ./scripts/lint.sh

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential bc
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install bc || echo "bc is already installed"
      - name: Create Python virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate || source .venv/Scripts/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
      - name: Build project
        run: make build || echo "Build skipped on $(uname -s)"

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential bc
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install bc
      - name: Create Python virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
      - name: Build project
        run: make build
      - name: Run unified test script
        run: |
          chmod +x scripts/run_tests.sh
          ./scripts/run_tests.sh
      - name: Upload coverage report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          directory: ./htmlcov/

  test-summary:
    if: always()
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Test Result Summary
        run: |
          echo "All tests completed"
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ All tests passed successfully!"
          else
            echo "❌ Some tests failed. See detailed job results."
            exit 1
          fi

  release:
    runs-on: ubuntu-latest
    needs: test-summary
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential bc zip
      - name: Create Python virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
      - name: Build project
        run: make build
      - name: Create release artifacts
        run: |
          mkdir -p dist
          tar -czf dist/pigame-v${{ github.ref_name }}.tar.gz --exclude='.git' --exclude='dist' .
          zip -r dist/pigame-v${{ github.ref_name }}.zip . -x "*.git*" "dist/*"
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            dist/pigame-v${{ github.ref_name }}.tar.gz
            dist/pigame-v${{ github.ref_name }}.zip
          draft: false
          prerelease: false
