#!/usr/bin/env bash

# This scripts calculates pi with bc and compaires it with your verion.

# Name: pigame
# Author: thomas@dyhr.com 
# Date: 10. April 2020
# Version: 1.3

VERSION='1.3'

#Default LENGTH of π: '3.141592653589793'
LENGTH=15


# Print Usage 
usage() {
    echo -e "Usage:\t$(basename ${0}) [-v] [-l LENGTH][-p] [-h] [-V] YOUR_PI" >&2
    echo -e "\tEvaluate your version of π (3.141.. )" >&2
    echo -e '\t-v          Increase verbosity.' >&2
    echo -e '\t-l LENGTH   Calculate π with LENGTH number of decimals.' >&2
    echo -e '\t-p          Show π.' >&2
    echo -e '\t-h          Usage.' >&2
    echo -e '\t-V          Version.' >&2
    exit 1
}


print_results() {
    # Print results to STOUT
    if [[ "${VERBOSE}" = 'true' ]]
    then
        echo -e "π with ${DEC} decimals:\t${PI}"
        echo -e "Your version of π:\t$(color_your_pi)"
        if [[ "${PI}" == ${YOUR_PI} ]]  # NB! In BASH you can use = or == for comparison
        then
            if [[ "${LENGTH}" -lt 15 ]]
            then
                echo 'Well done.'
            else
                echo 'Perfect!'
            fi
        else
            echo -e 'You can do better!'
        fi
    else
        echo "${PI}"
        echo "$(color_your_pi)"
        if [[ "${PI}" = ${YOUR_PI} ]]
        then
            echo 'True'
        else
            echo 'False'
        fi
    fi
}


# colorize mistakes in YOUR_PI if any
color_your_pi() {
    # RED colour table
    local RED='\033[0;31m'
    local NC='\033[0m' # No Color
    
    # Loop over each character in $YOUR_PI and compare it to $PI 
    for (( i=0; i<${#YOUR_PI}; i++ ))
    do
        if [[ "${YOUR_PI:$i:1}" = "${PI:$i:1}" ]]
        then
            printf "${YOUR_PI:$i:1}"
        else
            printf "${RED}${YOUR_PI:$i:1}${NC}"
        fi
done
echo # terminate printf
}


# Calculate π
calc_pi() {
    # Avoid rounding and keep precision of π's last decimal by
    # adding 2 decimals and truncate with substring parameter expansion

    # Calculate π with ${SCALE} number of decimals using bc
    if [[ "${LENGTH}" -lt 4 ]]
    then
        PI=$(echo "scale=$(( LENGTH + 2 )); 4*a(1)" | bc -l)    # Bash arithmetic expansion.
    else
        PI=$(echo "scale=${LENGTH}; 4*a(1)" | bc -l)
    fi

    # Truncate with substring parameter expansion 3. equals 2 ie. reuse $LENGTH
    PI="${PI:0:LENGTH}"
}


# MENU: get command line options with getopts
# NB! BASH getopts does not support long name options like --help
# GNU getopt on linux support long name options (Mac OS X !?)
# Ref.: https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options

# TODO:
# PROBLEM: The order of options matters.
# parameters are valuated top to down!!
# This affects the value of LENGTH and VERBOSE
# because they are inter dependant.
# How does this work with GNU getopt instead of bash getopts!?

while getopts vl:phV OPTION
do
    case ${OPTION} in
        v)
            VERBOSE='true'
            ;;
        l)
            LENGTH=$((${OPTARG} + 2)) # calc_pi chops two decimals
            # echo '# DEBUG:'
            # echo "LENGTH: ${LENGTH}"
            ;;
        p)
            calc_pi
            if [[ "${VERBOSE}" = 'true' ]]
            then
                echo -e "π with $(( LENGTH - 2 )) decimals:\t${PI}" # remove 2 decimals (calc_pi)
            else
                echo -e "${PI}"
            fi
            ;;
        h)
            usage
            ;;
        V)
            echo "$(basename ${0}) version: ${VERSION} (https://github.com/docdyhr/pigame)"
            ;;
        ?)
            usage
            ;;
    esac
done


# Remove the options while leaving the remaining arguments.
shift "$(( OPTIND - 1 ))"

# echo "DEBUG:"
# echo "OPTIND: ${OPTIND}"
# echo "\$#: ${#}"
# echo "\$@: ${@}"

# Don't allow more than 1 parameter
if [[ "${#}" -gt 1 ]]
then
    usage
# Allow 1 positional parameter: YOUR_PI
elif [[ "${#}" -eq 1 ]]  
then
    # Input Validation: only float numbers
    # TODO:
    # Check if Inut Validation is precise, if not the refactor
    if [[ "${1}" == *[^[:digit:].]* ]]
    then
        echo 'Error: Invalid Input.'
        usage
    fi

    # User version of π 
    YOUR_PI="${1}"

    # number of decimals
    LENGTH=$(echo ${1} | awk '{print length}')

    # π with $DEC number of decimals
    if [[ "${LENGTH}" -lt 4 ]]
    then
        DEC=${LENGTH}
    else
        DEC=$(( LENGTH - 2 ))   # Bash arithmetic expansion, only integers!
    fi
    
    # Calculate π
    calc_pi

    # Print results to STDOUT
    print_results

    exit 0
else
    if [[ "${OPTIND}" -eq 1 ]]  # OPTIND is 1 only when pigame has NO parameters
    then
        usage
    fi
fi
